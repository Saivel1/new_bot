from aiogram import F, types
from aiogram.filters import Command
from bot_instance import dp
from keyboards.markup import MainKeyboard
from aiogram.types import CallbackQuery
from logger_setup import logger
from misc.utils import get_user, create_user


WELCOME_TEXT = """
ü™û <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IV VPN!</b>

–ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.

üîπ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
"""

ERROR_TEXT = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id #type: ignore
    logger.info(f"ID : {user_id} | –í–≤—ë–ª –∫–æ–º–∞–Ω–¥—É /start")
    user = await get_user(user_id)
    
    if not user:
        await create_user(user_id=user_id, username=message.from_user.username) #type: ignore
        await message.answer(
            WELCOME_TEXT,
            reply_markup=MainKeyboard.main_keyboard_with_trial(),
            parse_mode="HTML"
        ) 
    elif user.trial_used == False:    
        await message.answer(
            WELCOME_TEXT,
            reply_markup=MainKeyboard.main_keyboard_with_trial(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            WELCOME_TEXT,
            reply_markup=MainKeyboard.main_keyboard(),
            parse_mode="HTML"
        ) 

@dp.callback_query(F.data == "start_menu")
async def call_start(callback: CallbackQuery):
    user_id = callback.from_user.id #type: ignore
    logger.info(f"ID : {user_id} | –ù–∞–∂–∞–ª —Å—Ç–∞—Ä—Ç –º–µ–Ω—é")
    user = await get_user(user_id)
    
    if user is None:
        await callback.message.edit_text( #type: ignore
            text=ERROR_TEXT,
            parse_mode="HTML"
        )# type: ignore
    elif user.trial_used == False:    
        await callback.message.edit_text( #type: ignore
            WELCOME_TEXT,
            reply_markup=MainKeyboard.main_keyboard_with_trial(),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text( #type: ignore
            WELCOME_TEXT,
            reply_markup=MainKeyboard.main_keyboard(),
            parse_mode="HTML"
        )

@dp.message(Command("id"))
async def cmd_id(message: types.Message):
    user_id = message.from_user.id #type: ignore
    logger.info(f"ID : {user_id} | –í–≤—ë–ª –∫–æ–º–∞–Ω–¥—É /id")
    await message.answer(f"üÜî –í–∞—à ID: <code>{message.from_user.id}</code>", parse_mode="HTML") # type: ignore
